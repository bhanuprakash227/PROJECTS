#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

#define ELEMENT_COUNT 118

typedef struct {
    int atomic_number;
    char symbol[3];
    char name[30];
    float atomic_mass;
    char group_block[30];
} Element;

Element elements[ELEMENT_COUNT] = {
    {1,"H","Hydrogen",1.008,"nonmetal"},
    {2,"He","Helium",4.0026,"noble gas"},
    {3,"Li","Lithium",6.94,"alkali metal"},
    {4,"Be","Beryllium",9.0122,"alkaline earth metal"},
    {5,"B","Boron",10.81,"metalloid"},
    {6,"C","Carbon",12.011,"nonmetal"},
    {7,"N","Nitrogen",14.007,"nonmetal"},
    {8,"O","Oxygen",15.999,"nonmetal"},
    {9,"F","Fluorine",18.998,"halogen"},
    {10,"Ne","Neon",20.180,"noble gas"},
    {11,"Na","Sodium",22.990,"alkali metal"},
    {12,"Mg","Magnesium",24.305,"alkaline earth metal"},
    {13,"Al","Aluminum",26.982,"post-transition metal"},
    {14,"Si","Silicon",28.085,"metalloid"},
    {15,"P","Phosphorus",30.974,"nonmetal"},
    {16,"S","Sulfur",32.06,"nonmetal"},
    {17,"Cl","Chlorine",35.45,"halogen"},
    {18,"Ar","Argon",39.948,"noble gas"},
    {19,"K","Potassium",39.098,"alkali metal"},
    {20,"Ca","Calcium",40.078,"alkaline earth metal"},
    {21,"Sc","Scandium",44.956,"transition metal"},
    {22,"Ti","Titanium",47.867,"transition metal"},
    {23,"V","Vanadium",50.942,"transition metal"},
    {24,"Cr","Chromium",51.996,"transition metal"},
    {25,"Mn","Manganese",54.938,"transition metal"},
    {26,"Fe","Iron",55.845,"transition metal"},
    {27,"Co","Cobalt",58.933,"transition metal"},
    {28,"Ni","Nickel",58.693,"transition metal"},
    {29,"Cu","Copper",63.546,"transition metal"},
    {30,"Zn","Zinc",65.38,"transition metal"},
    {31,"Ga","Gallium",69.723,"post-transition metal"},
    {32,"Ge","Germanium",72.63,"metalloid"},
    {33,"As","Arsenic",74.922,"metalloid"},
    {34,"Se","Selenium",78.971,"nonmetal"},
    {35,"Br","Bromine",79.904,"halogen"},
    {36,"Kr","Krypton",83.798,"noble gas"},
    {37,"Rb","Rubidium",85.468,"alkali metal"},
    {38,"Sr","Strontium",87.62,"alkaline earth metal"},
    {39,"Y","Yttrium",88.906,"transition metal"},
    {40,"Zr","Zirconium",91.224,"transition metal"},
    {41,"Nb","Niobium",92.906,"transition metal"},
    {42,"Mo","Molybdenum",95.95,"transition metal"},
    {43,"Tc","Technetium",98,"transition metal"},
    {44,"Ru","Ruthenium",101.07,"transition metal"},
    {45,"Rh","Rhodium",102.91,"transition metal"},
    {46,"Pd","Palladium",106.42,"transition metal"},
    {47,"Ag","Silver",107.87,"transition metal"},
    {48,"Cd","Cadmium",112.41,"transition metal"},
    {49,"In","Indium",114.82,"post-transition metal"},
    {50,"Sn","Tin",118.71,"post-transition metal"},
    {51,"Sb","Antimony",121.76,"metalloid"},
    {52,"Te","Tellurium",127.60,"metalloid"},
    {53,"I","Iodine",126.90,"halogen"},
    {54,"Xe","Xenon",131.29,"noble gas"},
    {55,"Cs","Cesium",132.91,"alkali metal"},
    {56,"Ba","Barium",137.33,"alkaline earth metal"},
    {57,"La","Lanthanum",138.91,"lanthanide"},
    {58,"Ce","Cerium",140.12,"lanthanide"},
    {59,"Pr","Praseodymium",140.91,"lanthanide"},
    {60,"Nd","Neodymium",144.24,"lanthanide"},
    {61,"Pm","Promethium",145,"lanthanide"},
    {62,"Sm","Samarium",150.36,"lanthanide"},
    {63,"Eu","Europium",151.96,"lanthanide"},
    {64,"Gd","Gadolinium",157.25,"lanthanide"},
    {65,"Tb","Terbium",158.93,"lanthanide"},
    {66,"Dy","Dysprosium",162.50,"lanthanide"},
    {67,"Ho","Holmium",164.93,"lanthanide"},
    {68,"Er","Erbium",167.26,"lanthanide"},
    {69,"Tm","Thulium",168.93,"lanthanide"},
    {70,"Yb","Ytterbium",173.05,"lanthanide"},
    {71,"Lu","Lutetium",174.97,"lanthanide"},
    {72,"Hf","Hafnium",178.49,"transition metal"},
    {73,"Ta","Tantalum",180.95,"transition metal"},
    {74,"W","Tungsten",183.84,"transition metal"},
    {75,"Re","Rhenium",186.21,"transition metal"},
    {76,"Os","Osmium",190.23,"transition metal"},
    {77,"Ir","Iridium",192.22,"transition metal"},
    {78,"Pt","Platinum",195.08,"transition metal"},
    {79,"Au","Gold",196.97,"transition metal"},
    {80,"Hg","Mercury",200.59,"transition metal"},
    {81,"Tl","Thallium",204.38,"post-transition metal"},
    {82,"Pb","Lead",207.2,"post-transition metal"},
    {83,"Bi","Bismuth",208.98,"post-transition metal"},
    {84,"Po","Polonium",209,"metalloid"},
    {85,"At","Astatine",210,"halogen"},
    {86,"Rn","Radon",222,"noble gas"},
    {87,"Fr","Francium",223,"alkali metal"},
    {88,"Ra","Radium",226,"alkaline earth metal"},
    {89,"Ac","Actinium",227,"actinide"},
    {90,"Th","Thorium",232.04,"actinide"},
    {91,"Pa","Protactinium",231.04,"actinide"},
    {92,"U","Uranium",238.03,"actinide"},
    {93,"Np","Neptunium",237,"actinide"},
    {94,"Pu","Plutonium",244,"actinide"},
    {95,"Am","Americium",243,"actinide"},
    {96,"Cm","Curium",247,"actinide"},
    {97,"Bk","Berkelium",247,"actinide"},
    {98,"Cf","Californium",251,"actinide"},
    {99,"Es","Einsteinium",252,"actinide"},
    {100,"Fm","Fermium",257,"actinide"},
    {101,"Md","Mendelevium",258,"actinide"},
    {102,"No","Nobelium",259,"actinide"},
    {103,"Lr","Lawrencium",266,"actinide"},
    {104,"Rf","Rutherfordium",267,"transition metal"},
    {105,"Db","Dubnium",270,"transition metal"},
    {106,"Sg","Seaborgium",271,"transition metal"},
    {107,"Bh","Bohrium",270,"transition metal"},
    {108,"Hs","Hassium",277,"transition metal"},
    {109,"Mt","Meitnerium",278,"unknown"},
    {110,"Ds","Darmstadtium",281,"unknown"},
    {111,"Rg","Roentgenium",282,"unknown"},
    {112,"Cn","Copernicium",285,"transition metal"},
    {113,"Nh","Nihonium",286,"post-transition metal"},
    {114,"Fl","Flerovium",289,"post-transition metal"},
    {115,"Mc","Moscovium",290,"post-transition metal"},
    {116,"Lv","Livermorium",293,"post-transition metal"},
    {117,"Ts","Tennessine",294,"halogen"},
    {118,"Og","Oganesson",294,"noble gas"}
};

void print_element(const Element *e) {
    printf("Atomic Number: %d\n", e->atomic_number);
    printf("Symbol       : %s\n", e->symbol);
    printf("Name         : %s\n", e->name);
    printf("Atomic Mass  : %.3f\n", e->atomic_mass);
    printf("Group Block  : %s\n\n", e->group_block);
}

Element* find_by_number(int num) {
    for (int i = 0; i < ELEMENT_COUNT; ++i) {
        if (elements[i].atomic_number == num)
            return &elements[i];
    }
    return NULL;
}

Element* find_by_name(const char *name) {
    for (int i = 0; i < ELEMENT_COUNT; ++i) {
        if (strcasecmp(elements[i].name, name) == 0)
            return &elements[i];
    }
    return NULL;
}

void quiz_mode() {
    srand(time(NULL));
    int score = 0;
    for (int i = 0; i < 5; ++i) {
        int idx = rand() % ELEMENT_COUNT;
        printf("What is the atomic number of %s? ", elements[idx].name);
        int ans;
        scanf("%d", &ans);
        if (ans == elements[idx].atomic_number) {
            printf("Correct!\n");
            score++;
        } else {
            printf("Wrong. Correct Answer: %d\n", elements[idx].atomic_number);
        }
    }
    printf("Final Score: %d/5\n", score);
}

int main() {
    int choice;
    char input[20];

    while (1) {
        printf("\n--- Periodic Table Menu ---\n");
        printf("1. Lookup by Atomic Number\n");
        printf("2. Lookup by Element Name\n");
        printf("3. Compare Two Elements\n");
        printf("4. Quiz Mode\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        if (choice == 1) {
            int num;
            printf("Enter atomic number: ");
            scanf("%d", &num);
            Element *e = find_by_number(num);
            if (e) print_element(e);
            else printf("Element not found.\n");
        }
        else if (choice == 2) {
            printf("Enter element name: ");
            scanf("%s", input);
            Element *e = find_by_name(input);
            if (e) print_element(e);
            else printf("Element not found.\n");
        }
        else if (choice == 3) {
            char name1[20], name2[20];
            printf("Enter first element name: ");
            scanf("%s", name1);
            printf("Enter second element name: ");
            scanf("%s", name2);
            Element *e1 = find_by_name(name1);
            Element *e2 = find_by_name(name2);
            if (e1 && e2) {
                printf("\n--- Element 1 ---\n");
                print_element(e1);
                printf("--- Element 2 ---\n");
                print_element(e2);
            } else {
                printf("One or both elements not found.\n");
            }
        }
        else if (choice == 4) {
            quiz_mode();
        }
        else if (choice == 5) {
            break;
        }
        else {
            printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}
